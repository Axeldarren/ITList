generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Enum for the new project status lifecycle
enum ProjectStatus {
  Start
  OnProgress
  Resolve
  Finish
  Cancel
}

model User {
  userId               Int            @id @default(autoincrement())
  username             String         @unique
  email                String         @unique
  password             String
  NIK                  Int?           @unique
  profilePictureUrl    String?
  isAdmin              Boolean        @default(false)

  // --- Relations for Auditing ---
  createdProjects        Project[]      @relation("CreatedProjects")
  updatedProjects        Project[]      @relation("UpdatedProjects")
  deletedProjects        Project[]      @relation("DeletedProjects")
  createdTeams           Team[]         @relation("CreatedTeams")
  updatedTeams           Team[]         @relation("UpdatedTeams")
  deletedTeams           Team[]         @relation("DeletedTeams")
  authoredTasks          Task[]         @relation("AuthoredTasks")
  updatedTasks           Task[]         @relation("UpdatedTasks")
  deletedTasks           Task[]         @relation("DeletedTasks")
  authoredComments       Comment[]      @relation("AuthoredComments")
  updatedComments        Comment[]      @relation("UpdatedComments")
  deletedComments        Comment[]      @relation("DeletedComments")
  statusChanges          ProjectStatusHistory[]
  deletedAttachments   Attachment[]   @relation("DeletedAttachments")
  
  // --- Existing Relations ---
  assignedTasks        Task[]         @relation("AssignedTasks")
  taskAssignments      TaskAssignment[]
  attachments          Attachment[]
  teams                TeamMembership[]
}

model Project {
  id              Int           @id @default(autoincrement())
  name            String
  description     String?
  startDate       DateTime?
  endDate         DateTime?
  version         Int           @default(1)
  status          ProjectStatus @default(Start)

  // --- Audit Trail Fields ---
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @default(now()) @updatedAt // <-- FIX: Added @default(now())
  createdById     Int?
  createdBy       User?         @relation("CreatedProjects", fields: [createdById], references: [userId])
  updatedById     Int?
  updatedBy       User?         @relation("UpdatedProjects", fields: [updatedById], references: [userId])
  deletedAt       DateTime?
  deletedById     Int?
  deletedBy       User?         @relation("DeletedProjects", fields: [deletedById], references: [userId])

  // --- Relations ---
  projectTeams    ProjectTeam[]
  tasks           Task[]
  versions        ProjectVersion[]
  statusHistory   ProjectStatusHistory[]
}

model ProjectStatusHistory {
  id          Int           @id @default(autoincrement())
  projectId   Int
  project     Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  status      ProjectStatus
  changedAt   DateTime      @default(now())
  changedById Int
  changedBy   User          @relation(fields: [changedById], references: [userId])

  @@index([projectId])
}

model Task {
  id              Int       @id @default(autoincrement())
  title           String
  description     String?
  status          String?
  priority        String?
  tags            String?
  startDate       DateTime?
  dueDate         DateTime?
  points          Int?
  version         Int
  projectId       Int
  
  // --- Audit Trail Fields ---
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now()) @updatedAt // <-- FIX: Added @default(now())
  authorUserId    Int       
  author          User      @relation("AuthoredTasks", fields: [authorUserId], references: [userId])
  updatedById     Int?
  updatedBy       User?     @relation("UpdatedTasks", fields: [updatedById], references: [userId])
  deletedAt       DateTime?
  deletedById     Int?
  deletedBy       User?     @relation("DeletedTasks", fields: [deletedById], references: [userId])

  // --- Relations ---
  project         Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignedUserId  Int?
  assignee        User?     @relation("AssignedTasks", fields: [assignedUserId], references: [userId])
  comments        Comment[]
  attachments     Attachment[]
  taskAssignments TaskAssignment[]
}

model Comment {
  id          Int       @id @default(autoincrement())
  text        String
  taskId      Int
  
  // --- Audit Trail Fields ---
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt // <-- FIX: Added @default(now())
  userId      Int       
  user        User      @relation("AuthoredComments", fields: [userId], references: [userId])
  updatedById Int?
  updatedBy   User?     @relation("UpdatedComments", fields: [updatedById], references: [userId])
  deletedAt   DateTime?
  deletedById Int?
  deletedBy   User?     @relation("DeletedComments", fields: [deletedById], references: [userId])

  // --- Relations ---
  task        Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

model Team {
  id                   Int           @id @default(autoincrement())
  teamName             String
  productOwnerUserId   Int?
  projectManagerUserId Int?
  
  // --- Audit Trail Fields ---
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt // <-- FIX: Added @default(now())
  createdById Int?
  createdBy   User?     @relation("CreatedTeams", fields: [createdById], references: [userId])
  updatedById Int?
  updatedBy   User?     @relation("UpdatedTeams", fields: [updatedById], references: [userId])
  deletedAt   DateTime?
  deletedById Int?
  deletedBy   User?     @relation("DeletedTeams", fields: [deletedById], references: [userId])

  // --- Relations ---
  projectTeams         ProjectTeam[]
  members              TeamMembership[]
}

model ProjectVersion {
  id          Int      @id @default(autoincrement())
  version     Int
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime
  archivedAt  DateTime @default(now())
  status      ProjectStatus @default(Finish) 
  
  project     Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   Int
  
  @@index([projectId])
}

// --- Join Tables and Other Models ---

model TeamMembership {
  id     Int @id @default(autoincrement())
  userId Int
  teamId Int
  user   User @relation(fields: [userId], references: [userId])
  team   Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
}

model ProjectTeam {
  id        Int     @id @default(autoincrement())
  teamId    Int
  projectId Int
  
  team      Team    @relation(fields: [teamId], references: [id])
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model TaskAssignment {
  id     Int @id @default(autoincrement())
  userId Int
  taskId Int

  user   User @relation(fields: [userId], references: [userId])
  task   Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

model Attachment {
  id           Int      @id @default(autoincrement())
  fileURL      String   @db.Text
  fileName     String?
  taskId       Int
  uploadedById Int

  // --- NEW: Audit Trail Fields ---
  createdAt   DateTime  @default(now())
  deletedAt   DateTime?
  deletedById Int?
  deletedBy   User?     @relation("DeletedAttachments", fields: [deletedById], references: [userId])

  // --- Relations ---
  task         Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  uploadedBy   User     @relation(fields: [uploadedById], references: [userId])
}