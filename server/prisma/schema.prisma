// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql" // Changed from postgresql to mysql
  url      = env("DATABASE_URL")
}

model User {
  userId               Int            @id @default(autoincrement())
  username             String         @unique // Kept this as per your previous request
  email                String         @unique // Added email field
  password             String         // Added password field (will store hashed password)
  NIK                  Int         @unique // Added NIK (Employee Identification Number) field
  profilePictureUrl    String?        // Kept this field if you still need it
  teamId               Int?
  isAdmin              Boolean        @default(false) // Added isAdmin field

  authoredTasks        Task[]         @relation("TaskAuthor")
  assignedTasks        Task[]         @relation("TaskAssignee")
  taskAssignments      TaskAssignment[]
  attachments          Attachment[]
  comments             Comment[]
  team                 Team?          @relation(fields: [teamId], references: [id])
}

model Team {
  id                   Int           @id @default(autoincrement())
  teamName             String
  productOwnerUserId   Int?
  projectManagerUserId Int?
  projectTeams         ProjectTeam[]
  user                 User[]
}

model Project {
  id           Int           @id @default(autoincrement())
  name         String
  description  String?
  startDate    DateTime?
  endDate      DateTime?
  version      Int?          
  tasks        Task[]
  projectTeams ProjectTeam[]
}

model ProjectTeam {
  id        Int     @id @default(autoincrement())
  teamId    Int
  projectId Int
  
  team      Team    @relation(fields: [teamId], references: [id])
  project   Project @relation(fields: [projectId], references: [id])
}

model Task {
  id             Int          @id @default(autoincrement())
  title          String
  description    String?
  status         String?
  priority       String?
  tags           String?
  startDate      DateTime?
  dueDate        DateTime?
  points         Int?
  version        Int?         // Added version field as requested
  projectId      Int
  authorUserId   Int
  assignedUserId Int?

  project         Project          @relation(fields: [projectId], references: [id])
  author          User             @relation("TaskAuthor", fields: [authorUserId], references: [userId])
  assignee        User?            @relation("TaskAssignee", fields: [assignedUserId], references: [userId])
  taskAssignments TaskAssignment[]
  attachments     Attachment[]
  comments        Comment[]
}


model TaskAssignment {
  id     Int @id @default(autoincrement())
  userId Int
  taskId Int

  user   User @relation(fields: [userId], references: [userId])
  task   Task @relation(fields: [taskId], references: [id])
}

model Attachment {
  id           Int      @id @default(autoincrement())
  fileURL      String
  fileName     String?
  taskId       Int
  uploadedById Int

  task         Task     @relation(fields: [taskId], references: [id])
  uploadedBy   User     @relation(fields: [uploadedById], references: [userId])
}

model Comment {
  id     Int    @id @default(autoincrement())
  text   String
  taskId Int
  userId Int

  task   Task @relation(fields: [taskId], references: [id])
  user   User @relation(fields: [userId], references: [userId])
}
