generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  userId                   Int                    @id @default(autoincrement())
  username                 String                 @unique
  email                    String                 @unique
  password                 String
  NIK                      Int?                   @unique
  profilePictureUrl        String?
  department               String?
  isAdmin                  Boolean                @default(false)
  deletedAt                DateTime?
  deletedById              Int?
  activities               Activity[]
  deletedAttachments       Attachment[]           @relation("DeletedAttachments")
  attachments              Attachment[]
  deletedComments          Comment[]              @relation("DeletedComments")
  updatedComments          Comment[]              @relation("UpdatedComments")
  authoredComments         Comment[]              @relation("AuthoredComments")
  assignedMaintenanceTasks MaintenanceTask[]      @relation("AssignedMaintenanceTasks")
  createdMaintenanceTasks  MaintenanceTask[]      @relation("CreatedMaintenanceTasks")
  updatedMaintenanceTasks  MaintenanceTask[]      @relation("UpdatedMaintenanceTasks")
  productMaintainers       ProductMaintainer[]
  createdMaintenances      ProductMaintenance[]   @relation("CreatedMaintenances")
  deletedMaintenances      ProductMaintenance[]   @relation("DeletedMaintenances")
  updatedMaintenances      ProductMaintenance[]   @relation("UpdatedMaintenances")
  createdProjects          Project[]              @relation("CreatedProjects")
  deletedProjects          Project[]              @relation("DeletedProjects")
  updatedProjects          Project[]              @relation("UpdatedProjects")
  statusChanges            ProjectStatusHistory[]
  assignedTasks            Task[]                 @relation("AssignedTasks")
  authoredTasks            Task[]                 @relation("AuthoredTasks")
  deletedTasks             Task[]                 @relation("DeletedTasks")
  updatedTasks             Task[]                 @relation("UpdatedTasks")
  taskAssignments          TaskAssignment[]
  createdTeams             Team[]                 @relation("CreatedTeams")
  deletedTeams             Team[]                 @relation("DeletedTeams")
  updatedTeams             Team[]                 @relation("UpdatedTeams")
  teams                    TeamMembership[]
  timeLogs                 TimeLog[]
  maintenanceStatusChanges ProductMaintenanceStatusHistory[]
  staffId                 Int?                   @unique // Optional staff ID for linking with external systems
}

model Project {
  id                  Int                    @id @default(autoincrement())
  name                String
  description         String?                @db.Text
  prdUrl              String?                @db.Text
  startDate           DateTime?
  endDate             DateTime?
  version             Int                    @default(1)
  createdAt           DateTime               @default(now())
  createdById         Int?
  deletedAt           DateTime?
  deletedById         Int?
  status              ProjectStatus          @default(Start)
  updatedAt           DateTime               @default(now()) @updatedAt
  updatedById         Int?
  activities          Activity[]
  productMaintenances ProductMaintenance[]
  createdBy           User?                  @relation("CreatedProjects", fields: [createdById], references: [userId])
  deletedBy           User?                  @relation("DeletedProjects", fields: [deletedById], references: [userId])
  updatedBy           User?                  @relation("UpdatedProjects", fields: [updatedById], references: [userId])
  statusHistory       ProjectStatusHistory[]
  projectTeams        ProjectTeam[]
  versions            ProjectVersion[]
  tasks               Task[]
  projectTicket       ProjectTicket?         @relation("ProjectToProjectTicket")

  @@index([createdById], map: "Project_createdById_fkey")
  @@index([deletedById], map: "Project_deletedById_fkey")
  @@index([updatedById], map: "Project_updatedById_fkey")
}

model ProjectStatusHistory {
  id          Int           @id @default(autoincrement())
  projectId   Int
  status      ProjectStatus
  changedAt   DateTime      @default(now())
  changedById Int
  changedBy   User          @relation(fields: [changedById], references: [userId])
  project     Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([changedById], map: "ProjectStatusHistory_changedById_fkey")
}

model Task {
  id              Int              @id @default(autoincrement())
  title           String
  description     String?          @db.Text
  status          String?
  priority        String?
  tags            String?
  startDate       DateTime?
  dueDate         DateTime?
  points          Int?
  version         Int
  projectId       Int
  authorUserId    Int
  assignedUserId  Int?
  createdAt       DateTime         @default(now())
  deletedAt       DateTime?
  deletedById     Int?
  updatedAt       DateTime         @default(now()) @updatedAt
  updatedById     Int?
  activities      Activity[]
  attachments     Attachment[]
  comments        Comment[]
  assignee        User?            @relation("AssignedTasks", fields: [assignedUserId], references: [userId])
  author          User             @relation("AuthoredTasks", fields: [authorUserId], references: [userId])
  deletedBy       User?            @relation("DeletedTasks", fields: [deletedById], references: [userId])
  project         Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  updatedBy       User?            @relation("UpdatedTasks", fields: [updatedById], references: [userId])
  taskAssignments TaskAssignment[]
  timeLogs        TimeLog[]

  @@index([assignedUserId], map: "Task_assignedUserId_fkey")
  @@index([authorUserId], map: "Task_authorUserId_fkey")
  @@index([deletedById], map: "Task_deletedById_fkey")
  @@index([projectId], map: "Task_projectId_fkey")
  @@index([updatedById], map: "Task_updatedById_fkey")
}

model Comment {
  id          Int       @id @default(autoincrement())
  text        String    @db.Text
  taskId      Int?      // Make optional to support maintenance tasks
  userId      Int
  createdAt   DateTime  @default(now())
  deletedAt   DateTime?
  deletedById Int?
  updatedAt   DateTime  @default(now()) @updatedAt
  updatedById Int?
  
  // Add maintenance task support
  maintenanceTaskId   Int?
  maintenanceTask     MaintenanceTask?   @relation(fields: [maintenanceTaskId], references: [id], onDelete: Cascade)
  
  deletedBy   User?     @relation("DeletedComments", fields: [deletedById], references: [userId])
  task        Task?     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  updatedBy   User?     @relation("UpdatedComments", fields: [updatedById], references: [userId])
  user        User      @relation("AuthoredComments", fields: [userId], references: [userId])
  timeLog     TimeLog?  @relation("TimeLogComment")

  @@index([deletedById], map: "Comment_deletedById_fkey")
  @@index([taskId], map: "Comment_taskId_fkey")
  @@index([updatedById], map: "Comment_updatedById_fkey")
  @@index([userId], map: "Comment_userId_fkey")
  @@index([maintenanceTaskId])
}

model Team {
  id                   Int              @id @default(autoincrement())
  teamName             String
  productOwnerUserId   Int?
  projectManagerUserId Int?
  createdAt            DateTime         @default(now())
  createdById          Int?
  deletedAt            DateTime?
  deletedById          Int?
  updatedAt            DateTime         @default(now()) @updatedAt
  updatedById          Int?
  projectTeams         ProjectTeam[]
  createdBy            User?            @relation("CreatedTeams", fields: [createdById], references: [userId])
  deletedBy            User?            @relation("DeletedTeams", fields: [deletedById], references: [userId])
  updatedBy            User?            @relation("UpdatedTeams", fields: [updatedById], references: [userId])
  members              TeamMembership[]

  @@index([createdById], map: "Team_createdById_fkey")
  @@index([deletedById], map: "Team_deletedById_fkey")
  @@index([updatedById], map: "Team_updatedById_fkey")
}

model TimeLog {
  id        Int       @id @default(autoincrement())
  startTime DateTime
  endTime   DateTime?
  duration  Int?
  description String? // Add description field
  createdAt DateTime  @default(now())
  taskId    Int?      // Make optional to support maintenance tasks
  userId    Int
  commentId Int?      @unique
  
  // Add maintenance task support
  maintenanceTaskId   Int?
  maintenanceTask     MaintenanceTask?   @relation(fields: [maintenanceTaskId], references: [id], onDelete: Cascade)
  
  comment   Comment?  @relation("TimeLogComment", fields: [commentId], references: [id])
  task      Task?     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [userId])

  @@index([taskId])
  @@index([userId])
  @@index([maintenanceTaskId])
}

model ProjectVersion {
  id          Int           @id @default(autoincrement())
  version     Int
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime
  archivedAt  DateTime      @default(now())
  status      ProjectStatus @default(Finish)
  projectId   Int
  project     Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
}

model Activity {
  id          Int          @id @default(autoincrement())
  type        ActivityType
  description String
  createdAt   DateTime     @default(now())
  projectId   Int
  userId      Int
  taskId      Int?
  project     Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  task        Task?        @relation(fields: [taskId], references: [id])
  user        User         @relation(fields: [userId], references: [userId])

  @@index([projectId])
  @@index([taskId], map: "Activity_taskId_fkey")
  @@index([userId], map: "Activity_userId_fkey")
}

model TeamMembership {
  id     Int  @id @default(autoincrement())
  userId Int
  teamId Int
  team   Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user   User @relation(fields: [userId], references: [userId])

  @@unique([userId, teamId])
  @@index([teamId], map: "TeamMembership_teamId_fkey")
}

model ProjectTeam {
  id        Int     @id @default(autoincrement())
  teamId    Int
  projectId Int
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  team      Team    @relation(fields: [teamId], references: [id])

  @@index([projectId], map: "ProjectTeam_projectId_fkey")
  @@index([teamId], map: "ProjectTeam_teamId_fkey")
}

model TaskAssignment {
  id     Int  @id @default(autoincrement())
  userId Int
  taskId Int
  task   Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user   User @relation(fields: [userId], references: [userId])

  @@index([taskId], map: "TaskAssignment_taskId_fkey")
  @@index([userId], map: "TaskAssignment_userId_fkey")
}

model Attachment {
  id           Int       @id @default(autoincrement())
  fileURL      String    @db.Text
  fileName     String?
  taskId       Int
  uploadedById Int
  createdAt    DateTime  @default(now())
  deletedAt    DateTime?
  deletedById  Int?
  deletedBy    User?     @relation("DeletedAttachments", fields: [deletedById], references: [userId])
  task         Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  uploadedBy   User      @relation(fields: [uploadedById], references: [userId])

  @@index([deletedById], map: "Attachment_deletedById_fkey")
  @@index([taskId], map: "Attachment_taskId_fkey")
  @@index([uploadedById], map: "Attachment_uploadedById_fkey")
}

model ProductMaintenance {
  id               Int                      @id @default(autoincrement())
  name             String
  description      String?                  @db.Text
  status           ProductMaintenanceStatus @default(Active)
  lifecycle        MaintenanceLifecycle      @default(Planned)
  priority         String?                  @default("Medium")
  projectId        Int?
  createdAt        DateTime                 @default(now())
  updatedAt        DateTime                 @default(now()) @updatedAt
  createdById      Int
  updatedById      Int?
  deletedAt        DateTime?
  deletedById      Int?
  maintenanceTasks MaintenanceTask[]
  maintainers      ProductMaintainer[]
  createdBy        User                     @relation("CreatedMaintenances", fields: [createdById], references: [userId])
  deletedBy        User?                    @relation("DeletedMaintenances", fields: [deletedById], references: [userId])
  project          Project?                 @relation(fields: [projectId], references: [id])
  updatedBy        User?                    @relation("UpdatedMaintenances", fields: [updatedById], references: [userId])
  statusHistory    ProductMaintenanceStatusHistory[]

  @@index([createdById], map: "ProductMaintenance_createdById_fkey")
  @@index([deletedById], map: "ProductMaintenance_deletedById_fkey")
  @@index([projectId], map: "ProductMaintenance_projectId_fkey")
  @@index([updatedById], map: "ProductMaintenance_updatedById_fkey")
}

model MaintenanceTask {
  id                   Int                @id @default(autoincrement())
  title                String
  description          String?            @db.Text
  priority             String?            @default("Medium")
  type                 String
  estimatedHours       Int?
  actualHours          Int?
  productMaintenanceId Int
  assignedToId         Int?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @default(now()) @updatedAt
  createdById          Int
  updatedById          Int?
  
  // Add missing relationships
  timeLogs             TimeLog[]          // Relationship to TimeLog
  comments             Comment[]          // Relationship to Comment
  maintenanceTaskTicket MaintenanceTaskTicket? @relation("MaintenanceTaskToMaintenanceTaskTicket")
  
  assignedTo           User?              @relation("AssignedMaintenanceTasks", fields: [assignedToId], references: [userId])
  createdBy            User               @relation("CreatedMaintenanceTasks", fields: [createdById], references: [userId])
  productMaintenance   ProductMaintenance @relation(fields: [productMaintenanceId], references: [id], onDelete: Cascade)
  updatedBy            User?              @relation("UpdatedMaintenanceTasks", fields: [updatedById], references: [userId])

  @@index([productMaintenanceId])
  @@index([assignedToId])
  @@index([createdById], map: "MaintenanceTask_createdById_fkey")
  @@index([updatedById], map: "MaintenanceTask_updatedById_fkey")
}

model ProductMaintainer {
  id                   Int                @id @default(autoincrement())
  productMaintenanceId Int
  userId               Int
  role                 String             @default("Maintainer")
  createdAt            DateTime           @default(now())
  productMaintenance   ProductMaintenance @relation(fields: [productMaintenanceId], references: [id], onDelete: Cascade)
  user                 User               @relation(fields: [userId], references: [userId])

  @@unique([productMaintenanceId, userId])
  @@index([userId], map: "ProductMaintainer_userId_fkey")
}

enum ProjectStatus {
  Start
  OnProgress
  Resolve
  Finish
  Cancel
}

enum ProductMaintenanceStatus {
  Active
  Inactive
}

enum MaintenanceLifecycle {
  Planned
  Maintaining
  Finished
}

model ProductMaintenanceStatusHistory {
  id                   Int                  @id @default(autoincrement())
  productMaintenanceId Int
  status               MaintenanceLifecycle
  changedAt            DateTime             @default(now())
  changedById          Int
  changedBy            User                 @relation(fields: [changedById], references: [userId])
  productMaintenance   ProductMaintenance   @relation(fields: [productMaintenanceId], references: [id], onDelete: Cascade)

  @@index([productMaintenanceId])
  @@index([changedById], map: "PMStatusHistory_changedById_fkey")
}

enum ActivityType {
  TASK_CREATED
  TASK_STATUS_UPDATED
  COMMENT_ADDED
  TASK_UPDATED
  TASK_DELETED
}

model ProjectTicket {
    id         Int      @id @default(autoincrement())
    ticket_id  String   @unique // Ensure a ticket cannot be associated with multiple projects
    projectId  Int      @unique // Ensure a project cannot have multiple tickets
    createdAt  DateTime @default(now())
    version    Int      @default(1)

    project     Project  @relation("ProjectToProjectTicket", fields: [projectId], references: [id], onDelete: Cascade)

    @@unique([projectId, version])
    @@unique([ticket_id, version])
}

model MaintenanceTaskTicket {
    id                   Int      @id @default(autoincrement())
    ticket_id            String   @unique // Ensure a ticket cannot be associated with multiple maintenance tasks
    maintenanceTaskId    Int      @unique // Ensure a maintenance task cannot have multiple tickets
    createdAt            DateTime @default(now())

    maintenanceTask      MaintenanceTask @relation("MaintenanceTaskToMaintenanceTaskTicket", fields: [maintenanceTaskId], references: [id], onDelete: Cascade)
}
